//ft_putchar.c

function ft_putchar allows you to write a character.

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

- in the wirte(1, &c, 1), first 1 means 'standard output'.

- &c means 'the address of variable c',
	because we should put address as a second argument.
- the last 1 means 'the lengths of char c'.
	ft_putchar will print only a character, not a string.
	so you need to write 1 as a third argument.
	(the length of character is always 1)

---------------------------------------------------------------------------

//main.c

inside the main function, you only use rush() function(s)
that is(are) inside rush0X.c.

so you need to call rush() function like this, to use rush() inside main,
void	rush(int x, int y);
before writing the main function.

i'll explain about rush() function in detail below,
but basically rush() takes two arguments called x and y.

the subject says,
rush(4, 4) should display:
$>./a.out
o--o
|  |
|  |
o--o

i'll say horizontal direction as a 'x axis',
and vertical direction as a 'y axis'.
so, if you put rush(4, 4), the result has 4 lines of horizontal direction,
and 4 lines of direction direction.    1234  (<- x axis)
				     1 o--o
				     2 |  |
				     3 |  |
				     4 o--o
				    (^ y axis)

int	main(void)
{
	rush(4, 4);
	return (0);
}
if you want to execute your program,
you need to compile first.

but without main function, the compiler(in this project, it is gcc)
won't work with error that you don't have main function.
that's why we use main.

inside the main, i only used rush() function.
if you want to see other results, you can change the number as you want.

for example, you can change the number like rush(6,3).
int	main()void
{
	rush(6,3);
	return (0);
}

---------------------------------------------------------------------------

//rush00.c, rush01.c, rush02.c, rush03.c, rush04.c

basically, the rush0X.c have exactly same logic.
let's see the rush() function inside rush00.c.

void	rush(int x, int y)
{
	int	cnt_x;
	int	cnt_y;

	cnt_x = 1;
	cnt_y = 1;
	if (x < 0 || y < 0 || x > 2147483647 || y > 2147483647)
	{
		err_msg();
		return ;
	}
	while (cnt_y <= y)
	{
		if (cnt_y == 1)
			ft_print_first_line(cnt_x, x);
		else if (cnt_y == y)
			ft_print_last_line(cnt_x, x);
		else
			ft_print_middle_line(cnt_x, x);
		ft_putchar('\n');
		cnt_y++;
		cnt_x = 1;
	}
}

as i explained before, rush() takes two arguments called x and y.
'x axis' represents horizontal direction,
'y axis' represents vertical direction.

           1234 (<- x axis)
         1 o--o
         2 |  |
         3 |  |
         4 o--o
        (^ y axis)

i declared 'cnt_x' and 'cnt_y' variables to count x axis and y axis.
and then initialized to 1(usually we tend to initialize int variable to 0,
but i did to 1 because it is more easy to see in this function)

if (x < 0 || y < 0 || x > 2147483647 || y > 2147483647)
{
	err_msg();
	return ;
}

if the x or y is less than 0, error message should be printed.
because when one of them is negative number, we can't express the result.

if the x or y is bigger than 2147483647, error message should be printed.
because the number 2147483648 means the maximum value of int variable,
so when one of x and y is bigger than 2147483648, it is not int anymore.

	    (x)1234 (<- x axis)
	  (y)
	   1   o--o
	   2   |  |
	   3   |  |
	   4   o--o
	  (^ y axis)

while(cnt_y <= y)
{
	if (cnt_y == 1)
		ft_print_first_line(cnt_x, x);
	else if (cnt_y == y)
		ft_print_last_line(cnt_x, x);
	else
		ft_print_middle_line(cnt_x, x);
	ft_putchar('\n');
	cnt_y++;
	cnt_x = 1;
}

after initializing cnt_x and cnt_y to 1, it'll go inside while loop.
cnt_y will be increased like 1, 2, 3, ..., until y+1.
when it becomes y+1, it is bigger than y so it'll escape the while loop.

let's say cnt_y is 1.

********** cnt_y == 1 **********

when cnt_y is 1, it'll go inside 'if (cnt_y == 1)'.
we'll go into the function ft_print_first_line().

function ft_print_first_line() prints the first line.(i mean, y is 1(o--o))

void	ft_print_first_line(int cnt_x, int x)
{
	while (cnt_x <= x)
	{
		if (cnt_x == 1)
			ft_putchar('o');
		else if (cnt_x == x)
			ft_putchar('o');
		else
			ft_putchar('-');
		cnt_x++;
	}
}

ft_print_first_line() takes two arguments of cnt_x and x.
we've already initialized cnt_x as 1 inside rush() function.
so it'll start with 1, and go inside while loop.
cnt_x will be increased like 1, 2, 3, ..., until x+1.
when it becomes x+1, it is bigger than x so it'll escape the while loop.

let's say cnt_x is 1.

##### cnt_y == 1 ##### cnt_x == 1 #####

when cnt_x is 1, it'll go inside 'if (cnt_x == 1)'.
it'll print 'o' character (the printed position (x, y) is (1, 1)).
after printing 'o' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o

now cnt_x is 2.

##### cnt_y == 1 ##### cnt_x == 2 #####

when cnt_x is 2, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print '-' character (the printed position (x, y) is (1, 2)).
after printing 'o' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o-

now cnt_x is 3.

##### cnt_y == 1 ##### cnt_x == 3 #####

when cnt_x is 3, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print '-' character (the printed position (x, y) is (1, 3)).
after printing 'o' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--

now cnt_x is 4.

##### cnt_y == 1 ##### cnt_x == 4 #####

when cnt_x is 4, it'll go inside 'else if (cnt_x == x)'
(because inside the main, we put (x, y) as (4, 4), so x is 4).
it'll print 'o' character (the printed position (x, y) is (1, 4)).
after printing 'o' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o

now cnt_x is 5.

##### cnt_y == 1 ##### cnt_x == 5 #####

when cnt_x is 5, it will not go inside while loop
because 5 is bigger than x.(x is 4).
so we printed every x axis when y is 1.

now the function ft_print_first_line is over, so we're going back to rush().
we were in 'if (cnt_y <= 1)'.

the first line (y is 1) is over, so next step is 'ft_putchar('\n').
whenever we finish to print each line, we'll have to put new line(\n).
and then cnt_y will be increased because of 'cnt_y++'.
don't forget to initialize cnt_x to 1, because we have to repeat this step
to print next line.

now cnt_y is 2 becase of cnt_y++ inside rush().

********** cnt_y == 2 **********

when cnt_y is 2, it'll go inside 'else'.
we'll go into the function ft_print_middle_line().

function ft_print_middle_line() prints the middle line.
(i mean, y is not 1 nor 4(|  |)).

void	ft_print_middle_line(int cnt_x, int x)
{
	while (cnt_x <= x)
	{
		if (cnt_x == 1)
			ft_putchar('|');
		else if (cnt_x == x)
			ft_putchar('|');
		else
			ft_putchar(' ');
	cnt_x++;
	}
}

let's say cnt_x is 1.

##### cnt_y == 2 ##### cnt_x == 1 #####

when cnt_x is 1, it'll go inside 'if (cnt_x == 1)'.
it'll print '|' character (the printed position (x, y) is (2, 1)).
after printing '|' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|

now cnt_x is 2.

##### cnt_y == 2 ##### cnt_x == 2 #####

when cnt_x is 2, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print ' ' character (the printed position (x, y) is (2, 2)).
after printing ' ' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
| 

now cnt_x is 3.

##### cnt_y == 2 ##### cnt_x == 3 #####

when cnt_x is 3, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print ' ' character (the printed position (x, y) is (2, 3)).
after printing ' ' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  

now cnt_x is 4.

##### cnt_y == 2 ##### cnt_x == 4 #####

when cnt_x is 4, it'll go inside 'else if (cnt_x == x)'
(because inside the main, we put (x, y) as (4, 4), so x is 4).
it'll print '|' character (the printed position (x, y) is (2, 4)).
after printing '|' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |

now cnt_x is 5.

##### cnt_y == 2 ##### cnt_x == 5 #####

when cnt_x is 5, it will not go inside while loop
because 5 is bigger than x.(x is 4).
so we printed every x axis when y is 2.

now the function ft_print_middle_line is over, so we're going back to rush().
we were in 'else'.

the second line (y is 2) is over, so next step is 'ft_putchar('\n').
we'll have to put new line(\n) and cnt_y will be increased because of 'cnt_y++'.
don't forget to initialize cnt_x to 1, because we have to repeat this step
to print next line.

now cnt_y is 3 becase of cnt_y++ inside rush().

********** cnt_y == 3 **********

when cnt_y is 2, it'll go inside 'else'.
we'll go into the function ft_print_middle_line().

function ft_print_middle_line() prints the middle line.
(i mean, y is not 1 nor 4(|  |)).

void	ft_print_middle_line(int cnt_x, int x)
{
	while (cnt_x <= x)
	{
		if (cnt_x == 1)
			ft_putchar('|');
		else if (cnt_x == x)
			ft_putchar('|');
		else
			ft_putchar(' ');
		cnt_x++;
	}
}

let's say cnt_x is 1.

##### cnt_y == 3 ##### cnt_x == 1 #####

when cnt_x is 1, it'll go inside 'if (cnt_x == 1)'.
it'll print '|' character (the printed position (x, y) is (3, 1)).
after printing '|' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|

now cnt_x is 2.

##### cnt_y == 3 ##### cnt_x == 2 #####

when cnt_x is 2, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print ' ' character (the printed position (x, y) is (3, 2)).
after printing ' ' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|

now cnt_x is 3.

##### cnt_y == 3 ##### cnt_x == 3 #####

when cnt_x is 3, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print ' ' character (the printed position (x, y) is (3, 3)).
after printing ' ' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|

now cnt_x is 4.

##### cnt_y == 3 ##### cnt_x == 4 #####

when cnt_x is 4, it'll go inside 'else if (cnt_x == x)'
(because inside the main, we put (x, y) as (4, 4), so x is 4).
it'll print '|' character (the printed position (x, y) is (3, 4)).
after printing '|' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|  |

now cnt_x is 5.

##### cnt_y == 3 ##### cnt_x == 5 #####

when cnt_x is 5, it will not go inside while loop
because 5 is bigger than x.(x is 4).
so we printed every x axis when y is 3.

now the function ft_print_middle_line is over, so we're going back to rush().
we were in 'else'.

the third line (y is 3) is over, so next step is 'ft_putchar('\n').
we'll have to put new line(\n) and cnt_y will be increased because of 'cnt_y++'.
don't forget to initialize cnt_x to 1, because we have to repeat this step
to print next line.

now cnt_y is 4 becase of cnt_y++ inside rush().

********** cnt_y == 4 **********

when cnt_y is 2, it'll go inside 'else if (cnt_y == y)'.
we'll go into the function ft_print_last_line().

function ft_print_last_line() prints the last line. (i mean, y is 4(o--o)).

void	ft_print_last_line(int cnt_x, int x)
{
	while (cnt_x <= x)
	{
		if (cnt_x == 1)
			ft_putchar('o');
		else if (cnt_x == x)
			ft_putchar('o');
		else
			ft_putchar('-');
		cnt_x++;
	}
}

let's say cnt_x is 1.

##### cnt_y == 4 ##### cnt_x == 1 #####

when cnt_x is 1, it'll go inside 'if (cnt_x == 1)'.
it'll print 'o' character (the printed position (x, y) is (4, 1)).
after printing 'o' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|  |
o

now cnt_x is 2.

##### cnt_y == 4 ##### cnt_x == 2 #####

when cnt_x is 2, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print '-' character (the printed position (x, y) is (4, 2)).
after printing '-' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|  |
o-

now cnt_x is 3.

##### cnt_y == 4 ##### cnt_x == 3 #####

when cnt_x is 3, it'll go inside 'else'(because cnt_x is not 1 nor x).
it'll print '-' character (the printed position (x, y) is (4, 3)).
after printing '-' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|  |
o--

now cnt_x is 4.

##### cnt_y == 4 ##### cnt_x == 4 #####

when cnt_x is 4, it'll go inside 'else if (cnt_x == x)'
(because inside the main, we put (x, y) as (4, 4), so x is 4).
it'll print 'o' character (the printed position (x, y) is (4, 4)).
after printing 'o' character, cnt_x will be increased because of 'cnt_x++'.

<result>
o--o
|  |
|  |
o--o

now cnt_x is 5.

##### cnt_y == 4 ##### cnt_x == 5 #####

when cnt_x is 5, it will not go inside while loop
because 5 is bigger than x.(x is 4).
so we printed every x axis when y is 4.

now the function ft_print_last_line is over, so we're going back to rush().
we were in 'else if (cnt_y == y)'.

the fourth (y is 4) is over, so next step is 'ft_putchar('\n').
we'll have to put new line(\n) and cnt_y will be increased because of 'cnt_y++'.
don't forget to initialize cnt_x to 1, because we have to repeat this step
to print next line.

now cnt_y is 5 becase of cnt_y++ inside rush().

********** cnt_y == 5 **********

when cnt_y is 5, it will not go inside while loop
becasue 5 is bigger than y.(y is 4).
we've already printed everything, and rush() function is done.

the main() function is done too.

---------------------------------------------------------------------------

//compile

you need to use gcc compiler and -Wall -Wextra -Werror flag.

if you want to see the result of rush00,
you can put command as "gcc -Wall -Wextra -Werror ft_putchar.c main.c rush00.c"
and then execute a.out via "./a.out" command.

if you want to see the result of rush01,
you can put command as "gcc -Wall -Wextra -Werror ft_putchar.c main.c rush01.c"
and then execute a.out via "./a.out" command.

if you want to see the result of rush02,
you can put command as "gcc -Wall -Wextra -Werror ft_putchar.c main.c rush02.c"
and then execute a.out via "./a.out" command.

if you want to see the result of rush03,
you can put command as "gcc -Wall -Wextra -Werror ft_putchar.c main.c rush03.c"
and then execute a.out via "./a.out" command.

if you want to see the result of rush04,
you can put command as "gcc -Wall -Wextra -Werror ft_putchar.c main.c rush04.c"
and then execute a.out via "./a.out" command.

whenever you change the main file, you have to compile again.

---------------------------------------------------------------------------

don't forget to check if your project has norm error,
and make sure every files(ft_putchar.c, main.c, and rush0X.c)
are inside ex00 directory.

or moulinette will give you grade 0.
